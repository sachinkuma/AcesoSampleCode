/*! procentric-js 0.1.2 2015-10-12 */

"use strict";var Procentric={errors:[],isLoaded:!1,isDebug:!1,modelName:"",platformVersion:"",platform:"LG PROCENTRIC",version:"PROCENTRIC",timeZoneName:"",networkDeviceList:[],applicationList:[],networkDeviceCount:"",startChannel:{},Power:{},successCallback:null,failedCallback:null,progressCallback:null};navigator.userAgent.indexOf(";LGE ;")>-1&&(window.LG=Procentric);var dummyDebug={};dummyDebug.log=dummyDebug.trace=dummyDebug.status=function(a){console.log(a)};var debug=window.debug||dummyDebug;Procentric.loadCheck=function(a){0==a.getIsLoaded()?setTimeout(function(){a.loadCheck(a)},100):(a.successCallback(),debug.log("BOOTSTRAPPED Instance!"),debug.log("Load Total: "+a.loadTotal),debug.log("Loaded: "+a.countLoaded),debug.log("Procentric initialize complete"))},Procentric.getIsLoaded=function(){this.isLoaded=!0;for(var a in this.preload)if(!this.preload[a].completed)return this.isLoaded=!1,this.isLoaded;return this.isLoaded},Procentric.setErrorCount=function(){this.errorCount=this.errorCount+1},Procentric.setError=function(a,b){this.errors.push({method:a,message:b})},Procentric.setProperty=function(a,b){hcap.property.setProperty({key:a,value:b,onSuccess:function(){console.log("[Procentric.setProperty]: Successfully set "+a+" = "+b)},onFailure:function(c){console.log("[Procentric.setProperty]: FAILED to set property "+a+" = "+b+" [ errorMessage = "+c.errorMessage+" ]")}})},Procentric.getError=function(){return this.errors},Procentric.getStartChannel=function(){return this.startChannel},Procentric.setPlatformVersion=function(a){this.platform=a.value,this.platformVersion=a.value,this.countLoaded=this.countLoaded+1,debug.log("Platform: "+this.platform)},Procentric.setNetworkDeviceCount=function(a){this.networkDeviceCount=a.count,this.loadTotal=this.loadTotal+(a.count-1),debug.log("Net Device Count: "+this.networkDeviceCount)},Procentric.setModelName=function(a){this.modelName=a.value,debug.log("Model Name: "+this.modelName)},Procentric.setNetworkDevice=function(a){if("object"==typeof a&&null!==a){try{var b=new Procentric.Device(a);this.networkDeviceList.push(b),debug.trace("DEV IP: "+b.getIp())}catch(c){debug.log(c)}debug.log("Network Mode: "+a.networkMode+" Name: "+a.name+" MAC: "+a.mac)}},Procentric.setTimeZoneName=function(a){this.timeZoneName=a.gmtOffsetInMinute,debug.log("Time Zone: "+this.timeZoneName)},Procentric.setApplicationList=function(a){this.applicationList=a.list;for(var b=$("<ul />"),c=0;c<a.list.length;c++){var d=$("<li />").append([a.list[c].id,a.list[c].title,a.list[c].iconFilePath].join(","));b.append(d)}debug.log(b)},Procentric.setStartChannel=function(a){debug.log("[Procentric.setStartChannel]: The Start Channel object has been saved"),this.startChannel=a},Procentric.fetchModelName=function(){var a=this;hcap.property.getProperty({key:"model_name",onSuccess:function(b){var c="[Procentric.fetchModelName SUCCESS]: We successfully retrieved the Model Name: "+b;a.setModelName(b),a.preload.model.completed=!0,a.progressCallback(a.preload.model.name),debug.log(c)},onFailure:function(b){var c="[Procentric.fetchModelName FAIL]: We failed to retrieve the Model Name. errorMessage: "+b.errorMessage;a.setError("fetchModelName",b.errorMessage),a.progressCallback("FAIL: "+a.preload.model.name),debug.log(c)}})},Procentric.fetchNetworkDeviceCount=function(){var a=this;debug.log("Fetching Network Device Count"),hcap.network.getNumberOfNetworkDevices({onSuccess:function(b){var c="[Procentric.fetchNetworkDeviceCount SUCCESS]: We successfully retrieved the Network Device Count: "+b.count;a.setNetworkDeviceCount(b),a.fetchNetworkDeviceList(),a.preload.netDeviceCount.completed=!0,a.progressCallback(a.preload.netDeviceCount.name),debug.log(c)},onFailure:function(b){var c="[Procentric.fetchNetworkDeviceCount FAIL]: We failed to retrieved the Network Device Count. errorMessage"+b.errorMessage;a.setError("fetchNetworkDeviceCount",b.errorMessage),a.progressCallback("FAIL: "+a.preload.netDeviceCount.name),debug.log(c)}})},Procentric.fetchNetworkDeviceList=function(){var a=this,b=a.networkDeviceCount;if(b>0)for(var c=0;b>c;c++)a.fetchNetworkDevice(c),a.preload["nd"+c]={name:"Network Device "+c,completed:!1}},Procentric.fetchNetworkDevice=function(a){var b=this;debug.log("Fetching Network Device"),hcap.network.getNetworkDevice({index:a,onSuccess:function(c){var d="[Procentric.fetchNetworkDevice SUCCESS]: We successfully retrieved the Network Device: "+c.name;b.setNetworkDevice(c),b.preload["nd"+a].name=c.name,b.preload["nd"+a].completed=!0,b.progressCallback("nd"+a+": "+b.preload["nd"+a].name),debug.log(d)},onFailure:function(c){var d="[Procentric.fetchNetworkDevice FAIL]: We failed to retrieve the Network Device. errorMessage "+c.errorMessage;b.setError("fetchNetworkDevice",c.errorMessage),b.progressCallback("FAIL: "+b.preload["nd"+a].name),debug.log(d)}})},Procentric.fetchTimeZoneName=function(){var a=this;debug.log("Fetching Timezone From TV"),hcap.time.getLocalTime({onSuccess:function(b){var c="[Procentric.fetchTimeZoneName SUCCESS]: We successfully retrieved the Time Zone Name";a.setTimeZoneName(b),a.preload.time.completed=!0,a.progressCallback(a.preload.time.name),debug.log(c)},onFailure:function(b){var c="[Procentric.fetchTimeZoneName FAIL]: We failed to fetch the Time Zone Name. errorMessage: "+b.errorMessage;a.setError("fetchTimeZoneName",b.errorMessage),a.progressCallback("FAIL: "+a.preload.time.name),debug.log(c)}})},Procentric.fetchApplicationList=function(){var a=this;debug.log("Fetching Application List"),hcap.preloadedApplication.getPreloadedApplicationList({onSuccess:function(b){a.setApplicationList(b),a.preload.appList.completed=!0,a.progressCallback(a.preload.appList.name)},onFailure:function(b){var c="[Procentric.fetchApplicationList FAIL]: We failed to fetch the Application List. errorMessage: "+b.errorMessage;a.setError("fetchApplicationList",b.errorMessage),a.progressCallback("FAIL: "+a.preload.appList.name),debug.log(c)}})},Procentric.fetchStartChannel=function(){var a=this;hcap.channel.getStartChannel({onSuccess:function(b){a.setStartChannel(b),a.preload.channel.completed=!0,a.progressCallback(a.preload.channel.name),debug.log("[Procentric.fechStartChannel SUCCESS]: Successfully retrieved Start Channel object: \n channel type      : "+b.channelType+"\n logical number    : "+b.logicalNumber+"\n frequency         : "+b.frequency+"\n program number    : "+b.programNumber+"\n major number      : "+b.majorNumber+"\n minor number      : "+b.minorNumber+"\n satellite ID      : "+b.satelliteId+"\n polarization      : "+b.polarization+"\n rf broadcast type : "+b.rfBroadcastType+"\n ip                : "+b.ip+"\n port              : "+b.port+"\n ip broadcast type : "+b.ipBroadcastType+"\n symbol rate       : "+b.symbolRate+"\n pcr pid           : "+b.pcrPid+"\n video pid         : "+b.videoPid+"\n video stream type : "+b.videoStreamType+"\n audio pid         : "+b.audioPid+"\n audio stream type : "+b.audioStreamType+"\n signal strength   : "+b.signalStrength+"\n source address    : "+b.sourceAddress)},onFailure:function(b){var c="[Procentric.fechStartChannel FAIL]: We were not able to retrieve the Start Channel: onFailure : errorMessage = "+b.errorMessage;a.preload.channel.completed=!0,Procentric.setError("Procentric.fetchStartChannel",b.errorMessage),a.progressCallback("FAIL: "+a.preload.channel.name),debug.log(c)}})},Procentric.fetchPlatformVersion=function(){var a=this;hcap.property.getProperty({key:"platform_version",onSuccess:function(b){var c="[Procentric.fetchPlatformVersion SUCCESS]: We successfully fetched the Platform Version.";a.setPlatformVersion(b),a.preload.version.completed=!0,a.progressCallback(a.preload.version.name),debug.log(c)},onFailure:function(b){var c="[Procentric.fetchPlatformVersion FAIL]: We failed to fetch the Platform Version. errorMessage: "+b.errorMessage;a.setError("fetchPlatformVersion",b.errorMessage),a.progressCallback("FAIL: "+a.preload.version.name),debug.log(c)}})},Procentric.executeBrowser=function(){},Procentric=Procentric||{},Procentric.dbgKeybindings=function(){document.addEventListener("keydown",function(a){var b=a.keyCode,c=hcap.key.Code;switch(debug.log("Key Code: "+b),b){case c.RED:var d=new Date;location.href="index.html?time="+d.getTime();break;case c.GREEN:hcap.mode.getHcapMode({onSuccess:function(a){debug.log("HCAP MODE: "+a.mode)},onFailure:function(a){}});break;case c.BLUE:$("body").toggle();break;case c.YELLOW:setTimeout(function(){debug.log("going down for reboot now")},3e3),hcap.power.reboot({onSuccess:function(){debug.log("onSuccess")},onFailure:function(a){debug.log("onFailure : errorMessage = "+a.errorMessage)}});break;case c.PORTAL:hcap.mode.setHcapMode({mode:hcap.mode.HCAP_MODE_1,onSuccess:function(){debug.log("onSuccess")},onFailure:function(a){debug.log("onFailure : errorMessage = "+a.errorMessage)}})}})},Procentric=Procentric||{},Procentric.Device=function(a){this.networkMode="wired",this.name="",this.mac="",this.ip="",this.gateway="",this.netmask="",this.init(a)},Procentric.Device.prototype.init=function(a){if("object"==typeof a)for(var b in a)this[b]=a[b],debug.log("DEVICE PARAM INDEX: "+b+": "+this[b])},Procentric.Device.prototype.getNetworkMode=function(){return this.networkMode},Procentric.Device.prototype.getName=function(){return this.name},Procentric.Device.prototype.getMac=function(){return debug.log("RETURNING MAC: "+this.mac),this.mac},Procentric.Device.prototype.getIp=function(){return this.ip},Procentric.Device.prototype.getGateway=function(){return this.gateway},Procentric.Device.prototype.getNetmask=function(){return this.netmask},Procentric=Procentric||{},Procentric.tuneRFChannel=function(a){debug.log("CHANGING RF CHANNEL"),hcap.channel.requestChangeCurrentChannel({channelType:hcap.channel.ChannelType.RF,majorNumber:a.major,minorNumber:a.minor,rfBroadcastType:hcap.channel.RfBroadcastType.CABLE,onSuccess:function(){debug.log("[Procentric.tuneRFChannel] We have tuned the channel. Successful RF channel tuning: "+a.major+"-"+a.minor),a.onSuccess&&a.onSuccess.apply(a)},onFailure:function(b){debug.log("[Procentric.tuneRFChannel] Failed to tune RF channel: errorMessage = "+b.errorMessage),a.onFailure&&a.onFailure.apply(a,arguments)}})},Procentric.tuneIPChannel=function(a){debug.log("CHANGING IP CHANNEL"),hcap.channel.requestChangeCurrentChannel({channelType:hcap.channel.ChannelType.IP,ip:a.ip,port:a.port,ipBroadcastType:hcap.channel.IpBroadcastType.UDP,onSuccess:function(){debug.log("[Procentric.tuneIPChannel] We have tuned the channel. Successful IP channel tuning: "+a.ip+"-"+a.port),a.onSuccess&&a.onSuccess.apply(a)},onFailure:function(b){debug.log("[Procentric.tuneIPChannel] Failed to tune IP channel: errorMessage = "+b.errorMessage),a.onFailure&&a.onFailure.apply(a,arguments)}})},Procentric.killChannel=function(){var a=Procentric.getStartChannel();hcap.channel.stopCurrentChannel({onSuccess:function(){debug.log("[Procentric.killChannel] We have stopped the channel"),Procentric.tuneRFChannel({major:a.majorNumber,minor:a.minorNumber})},onFailure:function(a){debug.log("[Procentric.killChannel] We FAILED to stop the channel errorMessage: "+a.errorMessage)}})},Procentric=Procentric||{};var dummyDebug={};dummyDebug.log=dummyDebug.trace=dummyDebug.status=function(a){console.log(a)};var debug=window.debug||dummyDebug;Procentric.Power={instantPower:2},document.addEventListener("power_mode_changed",function(){debug.log("[Procentric.Power]: Event 'power_mode_changed' is received POWER MODE HAS BEEN CHANGED!!! "),Procentric.stopChannel(),hcap.power.getPowerMode({onSuccess:function(a){debug.log("[Procentric.Power]: We have checked the power mode and it is: "+a.mode),hcap.mode.setHcapMode({mode:hcap.mode.HCAP_MODE_1,onSuccess:function(){debug.log("[Procentric.Power]: The TV successfully completed 'power_mode_change' event")},onFailure:function(a){debug.log("[Procentric.Power]: Failed to execute power_mode_change. onFailure : errorMessage = "+a.errorMessage)}});var b=new Event("keydown");if(b.keyCode=b.Code=16777399,Procentric.Power.setLocalState(a.mode),document.dispatchEvent(b),a.mode==hcap.power.PowerMode.NORMAL&&1==Procentric.isDebug){var c=new Date;location.href="index.html?time="+c.getTime()}},onFailure:function(a){console.log("[Procentric.Power]: We were not able to retrieve the Power Mode: errorMessage = "+a.errorMessage)}})},!1),Procentric.Power.setLocalState=function(a){a==hcap.power.PowerMode.NORMAL?(this.state="normal",debug.log("[Procentric.Power]: Power State is NORMAL")):a==hcap.power.PowerMode.WARM?(this.state="warm",debug.log("[Procentric.Power]: Power State is WARM")):(this.state="off",debug.log("[Procentric.Power]: Power State is OFF"))},Procentric.Power.getLocalState=function(){return this.state},Procentric.Power.fetchState=function(){var a=Procentric.Power;hcap.power.getPowerMode({onSuccess:function(b){a.setLocalState(b.mode),Procentric.preload.power.completed=!0,Procentric.progressCallback(Procentric.preload.power.name),debug.log("[Procentric.Power.fetchState SUCCESS]: power mode "+a.state)},onFailure:function(a){var b="[Procentric.Power.fetchState FAIL]: Failed to retrieve power status. errorMessage = "+a.errorMessage;Procentric.setErrorCount(),Procentric.setError("Power.fetchState",a.errorMessage),Procentric.progressCallback("FAIL: "+Procentric.preload.power.name),debug.log(b)}}),hcap.property.getProperty({key:"instant_power",onSuccess:function(b){a.instantPower=b.value,debug.log("[Procentric.Power.fetchState SUCCESS]: instant power = "+b.value)},onFailure:function(a){debug.log("[Procentric.Power.fetchState FAIL]: unable to get instant power")}})},Procentric.Power.setState=function(a){var b=this;a=a.toUpperCase();var c=hcap.power.PowerMode[a];0!=this.instantPower?hcap.power.setPowerMode({mode:c,onSuccess:function(){b.getLocalState(c),console.log("[Procentric.Power.setState]: We have set the power mode to: "+a)},onFailure:function(b){console.log("[Procentric.Power.setState]: We were NOT able to set the power mode to: "+a+" onFailure : errorMessage = "+b.errorMessage)}}):0==this.instantPower&&"normal"!=a&&hcap.power.powerOff({onSuccess:function(){b.getLocalState(c),console.log("[Procentric.Power.setState]: We have powered off the device")},onFailure:function(a){console.log("[Procentric.Power.setState]: We were NOT able to power off the device. onFailure : errorMessage = "+a.errorMessage)}})},Procentric.Power.setPowerOnTime=function(a){var b=a.split(":");hcap.time.setPowerOnTime({hour:Number(b[0]),minute:Number(b[1]),onSuccess:function(){debug.log("[Procentric.Power.setOnTime]: We have set the onTime to "+a)},onFailure:function(b){debug.log("[Procentric.Power.setOnTime]: We were note able to set the Power on time to "+a+". onFailure : errorMessage = "+b.errorMessage)}})},Procentric=Procentric||{},Procentric.setDebug=function(a){this.isDebug=a},Procentric.bootstrap=function(a,b,c){return window.LG?(debug.log("...initializing procentric"),this.preload={model:{name:"Model",method:this.fetchModelName,completed:!1},version:{name:"Version",method:this.fetchPlatformVersion,completed:!1},power:{name:"Power State",method:this.Power.fetchState,completed:!1},channel:{name:"Start Channel",method:this.fetchStartChannel,completed:!1},appList:{name:"Application List",method:this.fetchApplicationList,completed:!1},netDeviceCount:{name:"Network Device Count",method:this.fetchNetworkDeviceCount,completed:!1}},this.successCallback=a,this.failedCallback=b,this.progressCallback=c,this.executePreload(),void this.loadCheck(this)):(debug.log("LG device not detected, bootstrap failed."),void b.apply())},Procentric.executePreload=function(){for(var a in this.preload)this.preload[a].method.apply(Procentric)},Procentric.getModelName=function(){return this.modelName},Procentric.getPlatformVersion=function(){return this.platformVersion},Procentric.getPlatform=function(){return this.platform},Procentric.getVersion=function(){return this.version},Procentric.getTimeZoneName=function(){return this.timeZoneName},Procentric.getApplicationList=function(){return this.applicationList},Procentric.getNetworkDeviceCount=function(){return this.networkDeviceCount},Procentric.getNetworkDeviceList=function(){return this.networkDeviceList},Procentric.getNetworkDevice=function(a){return this.networkDeviceList[a]},Procentric.playChannel=function(a){return a&&a.type&&"IP"==a.type.toUpperCase()?this.tuneIPChannel(a):this.tuneRFChannel(a)},Procentric.stopChannel=function(){this.killChannel()},Procentric.setTime=function(a){var b={year:a.year,month:a.month,day:a.day,hour:a.hour,minute:a.minute,second:a.second,gmtOffsetInMinute:a.gmtOffsetInMinute,isDaylightSaving:a.isDaylightSaving,onSuccess:function(){debug.log("Time successfully set on the LG device")},onFailure:function(){debug.log("FAILED to set the time on the LG device")}};hcap.time.setLocalTime(b)},Procentric.setPowerOnTime=function(a){Procentric.Power.setPowerOnTime(a)},Procentric.getPower=function(){return Procentric.Power.getLocalState()},Procentric.setPower=function(a){Procentric.Power.setState(a)};
//# sourceMappingURL=procentric.map
Procentric.VERSION = "0.1.2";
